---
# Ansible Bootstrap
# =================

# Found on the ansible mailing list and adopted

# Creates the 'ansibler' user and adds him to the 'sudo' group. Then concatenates ansible_rsa.pub to
# the ~/.ssh/authorized_keys on the target instance with group 'sudo'. Then make sure that sudoers is set to allow
# NOPASSWD from sudo, and run everything else with ansible with 'user: ansibler' and sudo:true. This way, all ansible
# activity is logged, and we can specifically revoke the key (and terminate ansible's control) if either
# (a) security is compromised or (b) we hand over control of an instance to a client.

- hosts: "{{ cluster_group }}"
  sudo: true
  vars:
    - authorized_rsa_key: "{{ lookup('file', 'ansible_rsa.pub') }}"
  tasks:
    - name: hostname should match 'inventory_name' when not on EC2
      hostname: name={{ inventory_hostname }}
      when: ec2_tag_Name is not defined

    - name: hostname should match the 'name' tag when on EC2
      hostname: name={{ ec2_tag_Name }}
      when: ec2_tag_Name is defined

    - name: create user 'ansibler'
      user: name=ansibler groups=sudo shell=/bin/bash

    - name: add 'ansibler' RSA SSH key
      authorized_key: user=ansibler key="{{ authorized_rsa_key }}"

    - name: change sudoers to contains NOPASSWD for sudo group
      shell: "creates=/etc/sudoers.bak chdir=/etc cp sudoers sudoers.bak && sed -ri -e 's/(%sudo\\s+ALL=\\(ALL:ALL\\))\\s+ALL/\\1 NOPASSWD: ALL/' /etc/sudoers"

    - name: install python-keyczar via apt (for Ansible's Accelerated Mode)
      apt: pkg=python-keyczar

    - name: unmount default /mnt on EC2
      when: ec2_tag_Name is defined
      mount: name=/mnt src=/dev/xvdb fstype=auto state=absent

    - name: find ephemeral devices attached by EC2 (/dev/xvd?)
      when: ec2_tag_Name is defined
      shell: ls /dev/xvd?
      register: devices

    - name: mount ephemeral drives on EC2
      when: ec2_tag_Name is defined
      mount: name=/data/volume{{ item.0 }} src={{ item.1 }} fstype=auto opts=defaults,noatime,nobootwait state=mounted passno=2
      with_indexed_items: devices.stdout_lines

    # Helpful local tasks
    - name: Generate lines with EC2 IPs, DNS and names ready for adding to /etc/hosts (optional)
      sudo: false
      local_action:
        template
        src=./append_me_to_etc_hosts.j2
        dest=./append_me_to_etc_hosts
      when: ec2_ip_address is defined
      register: new_hosts

    - name: /etc/hosts append instruction (optional)
      sudo: false
      local_action: debug msg="cat append_me_to_etc_hosts | sudo tee -a /etc/hosts"
      when: new_hosts.changed